"use strict";(self.webpackChunkCSP451=self.webpackChunkCSP451||[]).push([[122],{3905:(t,e,i)=>{i.d(e,{Zo:()=>h,kt:()=>u});var n=i(7294);function a(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function r(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){a(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function s(t,e){if(null==t)return{};var i,n,a=function(t,e){if(null==t)return{};var i,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(a[i]=t[i]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(a[i]=t[i])}return a}var l=n.createContext({}),c=function(t){var e=n.useContext(l),i=e;return t&&(i="function"==typeof t?t(e):r(r({},e),t)),i},h=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var i=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,h=s(t,["components","mdxType","originalType","parentName"]),m=c(i),u=a,d=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return i?n.createElement(d,r(r({ref:e},h),{},{components:i})):n.createElement(d,r({ref:e},h))}));function u(t,e){var i=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=i.length,r=new Array(o);r[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,r[1]=s;for(var c=2;c<o;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},3559:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=i(3117),a=(i(7294),i(3905));const o={id:"git-basic-commands",title:"Git Command Line Interface (CLI)",sidebar_position:1,description:"TBD"},r=void 0,s={unversionedId:"tutorials-github/git-basic-commands",id:"tutorials-github/git-basic-commands",title:"Git Command Line Interface (CLI)",description:"TBD",source:"@site/docs/tutorials-github/16-basic-commnads.md",sourceDirName:"tutorials-github",slug:"/tutorials-github/git-basic-commands",permalink:"/CSP451/tutorials-github/git-basic-commands",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/CSP451/tree/main/docs/tutorials-github/16-basic-commnads.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"git-basic-commands",title:"Git Command Line Interface (CLI)",sidebar_position:1,description:"TBD"},sidebar:"courseNotesSidebar",previous:{title:"Cloning Repositories",permalink:"/CSP451/tutorials-github/repositories"},next:{title:"Introduction to Branching in Git",permalink:"/CSP451/tutorials-github/git-branching"}},l={},c=[{value:"Git cheat sheet",id:"git-cheat-sheet",level:2},{value:"Basic Git commands",id:"basic-git-commands",level:3},{value:"git init",id:"git-init",level:3},{value:"git clone",id:"git-clone",level:3},{value:"git add",id:"git-add",level:3},{value:"git commit",id:"git-commit",level:3},{value:"git status",id:"git-status",level:3},{value:"git branch",id:"git-branch",level:3},{value:"git merge",id:"git-merge",level:3},{value:"git pull",id:"git-pull",level:3},{value:"git push",id:"git-push",level:3},{value:"Example: Contribute to an existing repository",id:"example-contribute-to-an-existing-repository",level:3},{value:"Example: contribute to an existing branch on GitHub",id:"example-contribute-to-an-existing-branch-on-github",level:3},{value:"Sources",id:"sources",level:2}],h={toc:c};function p(t){let{components:e,...o}=t;return(0,a.kt)("wrapper",(0,n.Z)({},h,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"git-cheat-sheet"},"Git cheat sheet"),(0,a.kt)("p",null,"This Git cheat sheet saves you time when you just can't remember what a command is or don't want to use git help in the command line. It is hard to memorize all the important Git commands by heart, so print this out or save it to your desktop to resort to when you get stuck. Source: ",(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet"},"Git cheat sheet")),(0,a.kt)("p",null,"You can download it using this ",(0,a.kt)("a",{target:"_blank",href:i(4502).Z},"link"),"."),(0,a.kt)("h3",{id:"basic-git-commands"},"Basic Git commands"),(0,a.kt)("p",null,"To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub. Here are some common commands for using Git:"),(0,a.kt)("h3",{id:"git-init"},"git init"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init"},(0,a.kt)("inlineCode",{parentName:"a"},"git init"))," initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control."),(0,a.kt)("h3",{id:"git-clone"},"git clone"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone"},(0,a.kt)("inlineCode",{parentName:"a"},"git clone"))," creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches."),(0,a.kt)("h3",{id:"git-add"},"git add"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/saving-changes"},(0,a.kt)("inlineCode",{parentName:"a"},"git add"))," stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history."),(0,a.kt)("h3",{id:"git-commit"},"git commit"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/saving-changes/git-commit"},(0,a.kt)("inlineCode",{parentName:"a"},"git commit"))," saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with ",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," will become a part of the snapshot with ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit"),"."),(0,a.kt)("h3",{id:"git-status"},"git status"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/inspecting-a-repository"},(0,a.kt)("inlineCode",{parentName:"a"},"git status"))," is used to inspect repositories. It shows the status of changes as untracked, modified, or staged."),(0,a.kt)("h3",{id:"git-branch"},"git branch"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/using-branches"},(0,a.kt)("inlineCode",{parentName:"a"},"git branch"))," shows the branches being worked on locally."),(0,a.kt)("h3",{id:"git-merge"},"git merge"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/using-branches/git-merge"},(0,a.kt)("inlineCode",{parentName:"a"},"git merge"))," merges lines of development together. This command is typically used to combine changes made on two distinct branches."),(0,a.kt)("h3",{id:"git-pull"},"git pull"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/syncing/git-pull"},(0,a.kt)("inlineCode",{parentName:"a"},"git pull"))," updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment."),(0,a.kt)("h3",{id:"git-push"},"git push"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/syncing/git-push"},(0,a.kt)("inlineCode",{parentName:"a"},"git push"))," updates the remote repository with any commits made locally to a branch."),(0,a.kt)("p",null,"For more information, see the ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs"},"full reference guide to Git commands"),"."),(0,a.kt)("h3",{id:"example-contribute-to-an-existing-repository"},"Example: Contribute to an existing repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# download a repository on GitHub to our machine\n# Replace `owner/repo` with the owner and name of the repository to clone\ngit clone https://github.com/owner/repo.git\n\n# change into the `repo` directory\ncd repo\n\n# create a new branch to store any new changes\ngit branch my-branch\n\n# switch to that branch (line of development)\ngit checkout my-branch\n\n# make changes, for example, edit `file1.md` and `file2.md` using the text editor\n\n# stage the changed files\ngit add file1.md file2.md\n\n# take a snapshot of the staging area (anything that\'s been added)\ngit commit -m "my snapshot"\n\n# push changes to github\ngit push --set-upstream origin my-branch\n')),(0,a.kt)("h3",{id:"example-contribute-to-an-existing-branch-on-github"},"Example: contribute to an existing branch on GitHub"),(0,a.kt)("p",null,"This example assumes that you already have a project called ",(0,a.kt)("inlineCode",{parentName:"p"},"repo")," on the machine and that a new branch has been pushed to GitHub since the last time changes were made locally."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# change into the `repo` directory\ncd repo\n\n# update all remote tracking branches, and the currently checked out branch\ngit pull\n\n# change into the existing branch called `feature-a`\ngit checkout feature-a\n\n# make changes, for example, edit `file1.md` using the text editor\n\n# stage the changed file\ngit add file1.md\n\n# take a snapshot of the staging area\ngit commit -m "edit file1"\n\n# push changes to github\ngit push\n')),(0,a.kt)("h2",{id:"sources"},"Sources"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("cite",null,"[GitHub Basic writing and formatting syntax][1]")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("cite",null,"[Git cheat sheet][2]"))))}p.isMDXComponent=!0},4502:(t,e,i)=>{i.d(e,{Z:()=>n});const n=i.p+"assets/files/Atlassian-Git-Cheatsheet-7012d7ba772182043fff203cbc1e4cfa.pdf"}}]);